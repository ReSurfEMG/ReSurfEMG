# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# # Distribution / packaging
resurfemg/__version__.py
.coverage


# Jupyter Notebook
.ipynb_checkpoints



# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv*
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject


/site
/historical_notebooks
/historical_notebooks/*
/researcher_interface/output
/researcher_interface/output2
/researcher_interface/output2/*
/researcher_interface/output_emg_processed
/researcher_interface/output_emg_processed_upsampled
/researcher_interface/output_emg_processed_upsampled/*
/researcher_interface/ML_files/*
/notebooks/open_work/hidden/*
/ML_files/*
/not_pushed/
/notebooks/my_saved_experiments.csv
/built_documentation/
.eggs/
*.egg-info/
/build/
/dist/
*~
*.zip
*.ipynb_checkpoints
not_pushed
conda-pkg/meta.yaml
config.json
